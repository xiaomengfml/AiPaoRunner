'''
    Author:PWND0U
    Ver:1.3
'''
from tkinter import *
import tkinter.messagebox
import tkinter.filedialog
import json
import time
from random import randint, uniform
from tkinter import ttk
import requests
import base64
import os

def encrypt(number):
    key = "xfvdmyirsg"
    numbers = list(map(int, list(str(number))))
    return_key = "".join([key[i] for i in numbers])
    return return_key


def pretty_print(jsonStr):
    print(json.dumps(json.loads(jsonStr), indent=4, ensure_ascii=False))


class Aipaoer(object):
    def __init__(self, IMEICode):
        self.IMEICode = IMEICode
        self.userName = ""
        self.userId = ""
        self.schoolName = ""
        self.token = ""
        self.runId = ""
        self.LastTime = ""
        self.LastTimeRest = []
        self.distance = 2400
        self.minSpeed = 2.0
        self.maxSpeed = 3.0
        self.shixiao = False
        self.raceNum = 0
        self.rest = []

    def __str__(self):
        return str(self.__dict__).replace("\'", "\"")

    def check_imeicode(self):
        IMEICode = self.IMEICode
        url = "http://client3.aipao.me/api/%7Btoken%7D/QM_Users/Login_AndroidSchool?IMEICode={IMEICode}".format(
            IMEICode=IMEICode)
        headers = {"version": "2.40"}
        rsp = requests.get(url, headers=headers)
        try:
            if rsp.json()["Success"]:
                okJson = rsp.json()
                self.token = okJson["Data"]["Token"]
                self.userId = okJson["Data"]["UserId"]
        except KeyError:
            print("IMEICode 失效")

    def get_info(self):
        token = self.token
        url = "http://client3.aipao.me/api/{token}/QM_Users/GS".format(token=token)
        headers = {"version": "2.40"}
        rsp = requests.get(url, headers=headers)
        try:
            if rsp.json()["Success"]:
                okJson = rsp.json()
                self.userName = okJson["Data"]["User"]["NickName"]
                self.schoolName = okJson["Data"]["SchoolRun"]["SchoolName"]
                self.minSpeed = okJson["Data"]["SchoolRun"]["MinSpeed"]
                self.maxSpeed = okJson["Data"]["SchoolRun"]["MaxSpeed"]
                self.distance = okJson["Data"]["SchoolRun"]["Lengths"]
        except KeyError:
            print("Unknown error in get_info")

    def get_runId(self):
        token = self.token
        distance = self.distance
        url = "http://client3.aipao.me/api/{token}/QM_Runs/SRS?S1=40.62828&S2=120.79108&S3={distance}" \
            .format(token=token, distance=distance)
        rsp = requests.get(url)
        try:
            if rsp.json()["Success"]:
                self.runId = rsp.json()["Data"]["RunId"]
        except KeyError:
            print("Unknown error in get_runId")

    def get_RaceNum(self):
        token = self.token
        userId = self.userId
        url = "http://client3.aipao.me/api/{token}/QM_Runs/getResultsofValidByUser?UserId={userId}&pageIndex=1&pageSize=10" \
            .format(token=token, userId=userId)
        headers = {"version": "2.40"}
        rsp = requests.get(url, headers=headers)
        try:
            if rsp.json()["Success"]:
                # 可根据自己需要进行获取
                # RaceNums：长跑次数
                # RaceMNums：晨跑次数
                # AllCount：总有效次数
                self.raceNum = rsp.json()["AllCount"]
                self.rest.append(self.raceNum)
        except KeyError:
            pass
        tree.insert("", "end", text=self.IMEICode, values=self.rest)

    def get_LateTime(self):
        token = self.token
        userId = self.userId
        url = "http://client3.aipao.me/api/{token}/QM_Runs/getResultsofValidByUser?UserId={userId}&pageIndex=1&pageSize=10" \
            .format(token=token, userId=userId)
        headers = {"version": "2.40"}
        rsp = requests.get(url, headers=headers)
        try:
            if rsp.json()["Success"]:
                self.LastTime = rsp.json()["listValue"][0]["ResultDate"]
                self.LastTimeRest.append(int(self.LastTime.split("年")[0]))
                self.LastTimeRest.append(int(self.LastTime.split("年")[1].split("月")[0]))
                self.LastTimeRest.append(int(self.LastTime.split("年")[1].split("月")[1].split("日")[0]))
            else:
                self.LastTimeRest = [9999, 9999, 9999]
        except KeyError:
            self.LastTimeRest = [9999, 9999, 9999]
            pass

    def upload_record(self):
        # 判断是否需要跑步
        if self.LastTimeRest[0]==time.localtime()[0] and self.LastTimeRest[1]==time.localtime()[1] and self.LastTimeRest[2]==time.localtime()[2]:
            self.rest = ["今日已经跑过了，请勿重复提交", self.userName]
            pass
        else:
            my_speed = round(uniform(self.minSpeed + 0.3, self.maxSpeed - 0.5), 2)
            my_distance = self.distance + randint(1, 5)
            my_costTime = int(my_distance // my_speed)
            my_step = randint(1555, 2222)
            # print(my_speed, my_distance, my_costTime, my_step)
            myParams = {
                "token": self.token,
                "runId": self.runId,
                "costTime": encrypt(my_costTime),
                "distance": encrypt(my_distance),
                "step": encrypt(my_step)}
            url = "http://client3.aipao.me/api/{token}/QM_Runs/ES?" \
                  "S1={runId}&S4={costTime}&S5={distance}&S6=A0A2A1A3A0&S7=1&S8=xfvdmyirsg&S9={step}".format(**myParams)
            rsp = requests.get(url)
            try:
                if rsp.json()["Success"]:
                    # Label(main_box, text=str(self.IMEICode+"：" + self.userName+"：" + "成功!")).grid(row=rowIndex, column=0, columnspan=3)
                    self.rest = ["成功!", self.userName]
                    # print(self.userName + ": 成功!")
            except KeyError:
                # Label(main_box, text=str(self.IMEICode + "：失败")).grid(row=rowIndex, column=0, columnspan=3)
                self.rest = ["失败!", self.userName]
                with open("失败.txt", "a+") as f:
                    f.write(self.IMEICode + "\n")
            # print("失败")


def selectPath():
    # 选择文件path_接收文件地址
    path_ = tkinter.filedialog.askopenfilename()

    # 通过replace函数替换绝对文件地址中的/来使文件可被程序读取
    # 注意：\\转义后为\，所以\\\\转义后为\\
    # path_ = path_.replace("/", "\\\\")
    # path设置path_的值
    path_all = path_
    path.set(path_)


def printPath():
    x = tree.get_children()
    for item in x:
        tree.delete(item)
    imeicodes = [IMCode.get().strip(" ")[:32]]
    IMEICodes = []
    if imeicodes[0] == '':
        imeicodes.pop()
        if path_all != "":
            with open(path_all, "rb") as fp:
                IMEICodes = fp.readlines()
                for IMEICode in IMEICodes:
                    IMEICode = IMEICode.decode("utf8")
                    imeicodes.append(IMEICode[:32])
            fp.close()
        else:
            tkinter.messagebox.showinfo('提示', '请选择任何一种方式进行程序执行')
            return
        print("读入 IMEICode完成，共 {}".format(len(IMEICodes)))
        print(imeicodes)
    if not imeicodes:
        return
    H = time.localtime().tm_hour
    # 判断是否在有效时间段内跑步，不是的话无效
    if ((H >= 6 and H < 8) or (H >= 17 and H < 23)):
        for IMEICode in imeicodes:
                if IMEICode[0] == "#":
                    print("跳过：" + IMEICode)
                    continue
                aipaoer = Aipaoer(IMEICode)
                aipaoer.check_imeicode()
                aipaoer.get_info()
                aipaoer.get_runId()
                aipaoer.get_LateTime()
                aipaoer.upload_record()
                aipaoer.get_RaceNum()
                # pretty_print(str(aipaoer))
            # print(path_all)
    else:
        tkinter.messagebox.showinfo('提示', '不在有效时间段内！！！')
        return


def main():
    ico = ''
    tmp = open("tmp.ico", "wb+")
    tmp.write(base64.b64decode(ico))
    tmp.close()
    global main_box
    main_box = Tk()
    global win_table
    win_table = Tk()
    # 设置标题
    main_box.title('阳光长跑程序 By:信息安全实验室 作者:PWND0U')
    main_box.iconbitmap(default='tmp.ico')
    win_table.iconbitmap(default='tmp.ico')
    # 设置窗口大小
    main_box.geometry('380x130')
    # 设置窗口是否可变长、宽，True：可变，False：不可变
    main_box.resizable(width=False, height=True)
    # 变量path
    global path
    global path_all
    path_all = ""
    path = StringVar()
    # IMCode
    global IMCode
    IMCode = StringVar()
    TextName = StringVar()
    # 输入框，标记，按键
    Label(main_box, text="目标路径: ").grid(row=0, column=0)
    # 输入框绑定变量path
    Entry(main_box, textvariable=path).grid(row=0, column = 1)
    Button(main_box, text="路径选择", command=selectPath).grid(row=0, column=2)
    Label(main_box, text="IMEICode: ").grid(row=1, column=0)
    # IMcode框
    Entry(main_box, textvariable=IMCode).grid(row=1, column=1)
    Label(main_box, text="单独给自己跑请填入\n批量选择txt文件").grid(row=1, column=2)
    # 把这里的command函数改成你自己的
    Button(main_box, text="开始跑步", command=printPath).grid(row=2, column=1)
    Label(main_box, text="By:信息安全实验室 作者:PWND0U ").grid(row=3, column=0, columnspan=2)
    Label(main_box, text="1.0").grid(row=3, column=2)
    win_table.title("结果：失败请查看当前目录底下(失败.txt) By:信息安全实验室 作者:PWND0U")  # #窗口标题
    win_table.geometry("500x230")  # #窗口位置500后面是字母x
    win_table.resizable(width=False, height=False)
    '''
    表格
    '''
    global tree
    tree = ttk.Treeview(win_table)  # #创建表格对象
    tree["columns"] = ("Status", "姓名", "有效次数")  # #定义列
    tree.column("Status", width=100)
    tree.column("姓名", width=100)
    tree.column("有效次数", width=100)
    tree.heading("Status", text="Status")
    tree.heading("姓名", text="姓名")
    tree.heading("有效次数", text="有效次数")
    tree.pack()
    os.remove("tmp.ico")
    main_box.mainloop()


if __name__ == "__main__":
    main()
